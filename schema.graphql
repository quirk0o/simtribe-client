schema {
  query: RootQueryType
  mutation: RootMutationType
}

input CreateLegacyInput {
  founderId: ID
  name: String!
}

type CreateLegacyPayload {
  """
  A list of failed validations. May be blank or null if mutation succeeded.
  """
  messages: [ValidationMessage]

  """
  The object created/updated/deleted by the mutation. May be null if mutation failed.
  """
  result: Legacy

  """
  Indicates if the mutation completed successfully or not.
  """
  successful: Boolean!
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

type DeleteLegacyPayload {
  """
  A list of failed validations. May be blank or null if mutation succeeded.
  """
  messages: [ValidationMessage]

  """
  The object created/updated/deleted by the mutation. May be null if mutation failed.
  """
  result: Legacy

  """
  Indicates if the mutation completed successfully or not.
  """
  successful: Boolean!
}

enum Gender {
  FEMALE
  MALE
}

type Legacy {
  createdAt: DateTime!
  founder: Sim
  id: ID!
  name: String!
  sims: [Sim!]!
  updatedAt: DateTime!
}

type RootMutationType {
  """
  Create a legacy
  """
  createLegacy(input: CreateLegacyInput!): CreateLegacyPayload!

  """
  Delete a legacy
  """
  deleteLegacy(id: ID!): DeleteLegacyPayload!
}

type RootQueryType {
  """
  Get all legacies
  """
  legacies: [Legacy!]!

  """
  Get all Sims
  """
  sims: [Sim!]!

  """
  Get all traits
  """
  traits(filter: TraitFilter): [Trait!]!
}

type Sim {
  avatarUrl: String
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  legacy: Legacy
  name: String!
  parent1: Sim
  parent2: Sim
  spouse: Sim
  traits: [Trait!]!
}

type Trait {
  conflicts: [Trait]!
  description: String
  id: ID!
  imgUrl: String
  lifeStages: [TraitLifeStage!]!
  name: String!
  type: TraitType!
}

input TraitFilter {
  lifeStage: TraitLifeStage
  type: TraitType
}

enum TraitLifeStage {
  ADULT
  CHILD
  INFANT
  TEEN
  TODDLER
}

enum TraitType {
  EMOTIONAL
  HOBBY
  INFANT
  LIFESTYLE
  SOCIAL
  TODDLER
}

"""
Validation messages are returned when mutation input does not meet the requirements.
  While client-side validation is highly recommended to provide the best User Experience,
  All inputs will always be validated server-side.

  Some examples of validations are:

  * Username must be at least 10 characters
  * Email field does not contain an email address
  * Birth Date is required

  While GraphQL has support for required values, mutation data fields are always
  set to optional in our API. This allows 'required field' messages
  to be returned in the same manner as other validations. The only exceptions
  are id fields, which may be required to perform updates or deletes.
"""
type ValidationMessage {
  """
  A unique error code for the type of validation used.
  """
  code: String!

  """
  The input field that the error applies to. The field can be used to
  identify which field the error message should be displayed next to in the
  presentation layer.

  If there are multiple errors to display for a field, multiple validation
  messages will be in the result.

  This field may be null in cases where an error cannot be applied to a specific field.
  """
  field: String

  """
  A friendly error message, appropriate for display to the end user.

  The message is interpolated to include the appropriate variables.

  Example: `Username must be at least 10 characters`

  This message may change without notice, so we do not recommend you match against the text.
  Instead, use the *code* field for matching.
  """
  message: String

  """
  A list of substitutions to be applied to a validation message template
  """
  options: [ValidationOption]

  """
  A template used to generate the error message, with placeholders for option substiution.

  Example: `Username must be at least {count} characters`

  This message may change without notice, so we do not recommend you match against the text.
  Instead, use the *code* field for matching.
  """
  template: String
}

type ValidationOption {
  """
  The name of a variable to be subsituted in a validation message template
  """
  key: String!

  """
  The value of a variable to be substituted in a validation message template
  """
  value: String!
}
